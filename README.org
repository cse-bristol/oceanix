#+TITLE: oceanix
#+AUTHOR: cse

A small program to do nix deployments & provisioning into digitalocean.

This has a small subset of the features in nixops.

* Installation

#+BEGIN_SRC sh
$ nix-env -i -f .
#+END_SRC

* Usage

You need a network file, which should look mostly like what nixops wants.

The network file should have an attribute set in it containing a thing called ~network~, and then other things which are the machines.

#+BEGIN_SRC nix
  {
    network = {
      name = "my network";
      defaults = {
         deployment.sshKey = "ssh-rsa AAA ...";
         deployment.digitalOcean.region = "lon1";
      };
    };

    machine1 = {config, pkgs, ...} : {
      deployment.digitalOcean.size = "c-32";
      ...
      services.nginx.enable = true;
    };

    machine2 = ...;
  }
#+END_SRC

Extra things you can put in machine config or default are:

- deployment.digitalOcean.size :: a digitalocean size slug
- deployment.digitalOcean.region :: a digitalocean region slug
- deployment.digitalOcean.image :: either the numeric ID of an image, or the *name* of an image. 
  You can make an image using ~oceanix create-image~, but you have to upload it yourself.
- deployment.sshKey :: an ssh public key; this will be enabled for root ssh login on the machine, and also added to digitalocean's cloud-init setup.
- deployment.copies :: an integer; if > 1, this machine will be replaced with machine-1 machine-2 ... machine-n.
- deployment.addHost :: true/false, if true this machine's ip address will be baked into /etc/hosts on all the machines against its name. For copies > 1 the addresses of every copy will be baked in.
- deployment.keys :: A set of keys, like in nixops; you can write things like

  #+BEGIN_SRC nix
  deployment.keys.smtp = {
    keyFile = /path/to/secret.key;
    user = "root"; group = "root"; permissions = "0600";
  };

  deployment.keys.fromPass.keyCommand = ["pass" "show" "secret-thing"];
  #+END_SRC

  These get copied into ~/run/keys~ on the machine. Unlike for nixops, you cannot put keys outside ~/run/keys~.

  A bit like nixops there is a service you can depend on; it is called ~keys@keyname~ so you could say ~after = [ "keys@smtp.service" ];~ and ~wants = [ "keys@smtp.service" ];~ to wait for that key.

You need to export ~DIGITALOCEAN_ACCESS_TOKEN~ to talk to the API.

Commands you can do are then:

#+BEGIN_SRC sh
$ oceanix build network.nix
#+END_SRC

This will produce a json file describing the network state.

#+BEGIN_SRC sh
$ oceanix plan network.nix network-tag
....
Plan:

CREATE+UPDATE m1-1 s-1vcpu-2gb
CREATE+UPDATE m1-2 s-1vcpu-2gb

Running cost:

|       :size | :cpu | :mem | :hourly1 | :monthly1 | :hourly | :monthly |
|-------------+------+------+----------+-----------+---------+----------|
| s-1vcpu-2gb |    2 | 4096 |  0.01488 |        10 |    0.03 |     20.0 |
#+END_SRC

This will build the network and then tell you:

- What it will cost when running and what resources it has
- What operations are needed to realize the plan

#+BEGIN_SRC sh
$ oceanix provision network.nix network-tag
#+END_SRC

This will build the network and create/destroy appropriate machines, but not do any deployment.

#+BEGIN_SRC sh
$ oceanix deploy network.nix network-tag
#+END_SRC

This will build, provision, and then deploy all the machines in the network.

* Disk images

oceanix depends on having a nixos image to start from (unlike nixops, which uses a fearsome script to brain-wipe an existing install).

It can create you an image with

#+BEGIN_SRC sh
$ oceanix create-image network.nix machine-name image-dir
#+END_SRC

The resulting image will be in ~image-dir/nixos.qcow2.bz~.

You can upload this image to digitalocean, and refer to it by name or ID in the network configuration. Although the image will have the cloud autoconfig thing baked into it, I don't know if that works, so make sure you have put in a nice old-fashioned ssh public key through ~network.defaults.deployment.sshKey~ or ~machine-name-here.deployment.sshKey~, so you can connect.

If you use a name, the first image with that name in the associated region will be selected.

You could use this to create a "blank" starting image with an empty config, or to create populated starting images which have any heavy dependencies you need.

* Limitations

- If you change a machine's size or region, this is not aligned later, or reported on.

  Management of regions in general is fairly poor.
- Some default configuration is baked into ~digitalocean.nix~, which you can't replace right now.
- The nix evaluation is done for every machine in the whole system in one go, which uses up a lot of memory if you have a lot of machines.
  
  If you have a lot of identical machines you can say ~deployment.copies = N~ on them though.
- Host key checking is off, which is clearly not what anyone wants
